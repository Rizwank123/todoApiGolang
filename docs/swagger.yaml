definitions:
  models.Task:
    properties:
      created_at:
        type: string
      desc:
        type: string
      id:
        type: integer
      name:
        type: string
      status:
        type: string
      user_id:
        type: integer
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8090
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: go lang practice rest api.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: ToDo Api
  version: "1.0"
paths:
  /tasks:
    get:
      consumes:
      - application/json
      description: Get list of tasks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
      summary: get all task
      tags:
      - Task
    post:
      consumes:
      - application/json
      description: Get a new Task
      parameters:
      - description: Task object to be created
        in: body
        name: t
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
      summary: Creat a task
      tags:
      - Task
  /tasks/{id}:
    delete:
      consumes:
      - application/json
      description: delete a task by id
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Delete task
      tags:
      - Task
    get:
      consumes:
      - application/json
      description: Get a task by id
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
      summary: Get a task
      tags:
      - Task
    put:
      consumes:
      - application/json
      description: update  task by id
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Task
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
      summary: update  task
      tags:
      - Task
  /tasks/users/{userId}:
    get:
      consumes:
      - application/json
      description: Get list of tasks
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
      summary: get all task
      tags:
      - Task
  /users:
    post:
      consumes:
      - application/json
      description: Get a new user
      parameters:
      - description: create user
        in: body
        name: u
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
      summary: Create a user
      tags:
      - User
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: delete user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: delete user
      tags:
      - User
    get:
      consumes:
      - application/json
      description: get user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: get user bu Id
      tags:
      - User
    put:
      consumes:
      - application/json
      description: update user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: update user
      tags:
      - User
swagger: "2.0"
